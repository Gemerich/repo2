# References:
## https://github.com/marketplace/actions/merge-conflict-finder
## https://blog.marcnuri.com/triggering-github-actions-across-different-repositories
## https://github.com/marketplace/actions/merge-branch

name: New Release

on:
  workflow_dispatch:
    inputs:
      distinct_id:
        description: "Distinct ID"
        required: true
      version_number:
        description: "Version number"
        required: true
      build-type:
        type: choice
        description: Build type
        required: true
        options:
          - build
          - revision
          - minor
          - major
      release:
        type: choice
        description: Release environemnt
        required: true
        options:
          - beta
          - production

jobs:
  execute-tagging:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: beta
      - name: Set environment variables from project settings
        run: |
          exec .github/scripts/run.sh ${{ github.event.inputs.version_number }}
          - name: Create release branch
        env:
          GITHUB_TOKEN: ${{ secrets.AUTODEPLOYMENT_BOT_PAT }}
      - name: Create release branch
        run: |
          git checkout -b release/${{ github.event.inputs.version_number }}
          git push --set-upstream --force origin release/${{ github.event.inputs.version_number }}
      - name: Commit package.json
        run: |
          git config user.name "autodeployment-bot"
          git config user.email autodeployment-bot@diviproject.com
          git add package.json
          git commit --message "Prepare release ${{ github.event.inputs.version_number }}"
          echo "::set-output name=commit::$(git rev-parse HEAD)"
      - name: Push new branch
        run: git push origin release/${{ github.event.inputs.version_number }}
      - name: Create pull request release -> beta
        env:
          GITHUB_TOKEN: ${{ secrets.AUTODEPLOYMENT_BOT_PAT }}
        run: |
          nl=$'\n'
          body="Hi @${{ github.actor }}! ${nl}This PR was created in response to a manual trigger of the release workflow here: \
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}. ${nl}"
          gh pr create --title "Release ${{ github.event.inputs.version_number }} release -> beta" --body "$body" --label release --base beta --head release/${{ github.event.inputs.version_number }} || true
      - name: Approve PR
        env:
          GITHUB_TOKEN: ${{ secrets.PR_APPROVE_BOT_PAT }}
        run: |
          gh pr review release/${{ github.event.inputs.version_number }} --approve
      - name: Merge release -> beta
        env:
          GITHUB_TOKEN: ${{ secrets.AUTODEPLOYMENT_BOT_PAT }}
        run: |
          gh pr merge release/${{ github.event.inputs.version_number }} --merge

      - name: Create pull request release -> development
        env:
          GITHUB_TOKEN: ${{ secrets.AUTODEPLOYMENT_BOT_PAT }}
        run: |
          nl=$'\n'
          body="Hi @${{ github.actor }}! ${nl}This PR was created in response to a manual trigger of the release workflow here: \
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}. ${nl}"
          gh pr create --title "Release ${{ github.event.inputs.version_number }} release -> development" --body "$body" --label release --base development --head release/${{ github.event.inputs.version_number }} || true
      - name: Approve PR
        env:
          GITHUB_TOKEN: ${{ secrets.PR_APPROVE_BOT_PAT }}
        run: |
          gh pr review release/${{ github.event.inputs.version_number }} --approve
      - name: Merge release -> development
        env:
          GITHUB_TOKEN: ${{ secrets.AUTODEPLOYMENT_BOT_PAT }}
        run: |
          gh pr merge release/${{ github.event.inputs.version_number }} --delete-branch --merge

      - name: Tag
        run: |
          git checkout beta
          git pull
          git tag "v-${{ github.event.inputs.build-type }}-release-${{ github.event.inputs.version_number }}"
          git push origin --tags
